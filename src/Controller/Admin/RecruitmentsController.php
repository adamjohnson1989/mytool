<?php
namespace App\Controller\Admin;

use App\Controller\Admin\AdminController;
use Cake\Event\Event;
use Cake\Network\Session\DatabaseSession;

/**
 * Recruitments Controller
 *
 * @property \App\Model\Table\RecruitmentsTable $Recruitments
 *
 * @method \App\Model\Entity\Recruitment[] paginate($object = null, array $settings = [])
 */
class RecruitmentsController extends AdminController
{
    public function beforeRender(Event $event)
    {
        parent::beforeRender($event); // TODO: Change the autogenerated stub
        $this->viewBuilder()->layout('admin');
    }
    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Users']
        ];
        $recruitments = $this->paginate($this->Recruitments);
        $this->set(compact('recruitments'));
            $this->set('_serialize', ['recruitments']);
    }

    /**
     * View method
     *
     * @param string|null $id Recruitment id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $recruitment = $this->Recruitments->get($id, [
            'contain' => ['Users']
        ]);

        $this->set('recruitment', $recruitment);
        $this->set('_serialize', ['recruitment']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $recruitment = $this->Recruitments->newEntity();
        if ($this->request->is('post')) {
            $dataArr = $this->request->getData();
            $dataSave = [];
            foreach ($dataArr as $k => $data){
                $dataSave[$k] = htmlspecialchars($data);
            }
            $dataSave['created_at'] = date('d/m/Y', time());
            $dataSave['users_id'] = $this->Auth->user('id');
            $recruitment = $this->Recruitments->patchEntity($recruitment, $dataSave);
            if ($this->Recruitments->save($recruitment)) {
                $this->Flash->success(sprintf("<div class='alert alert-success'>%s</div>",  h("Đơn Hàng Mới Đã Được Tạo!")), ['escape' => false]);
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(sprintf("<div class='alert alert-danger'>%s</div>",  h('Lỗi Tạo Đơn Hàng, Kiểm Tra Lại Thông Tin')), ['escape' => false]);
        }
        $users = $this->Recruitments->Users->find('list', ['limit' => 200]);
        $this->set(compact('recruitment', 'users'));
        $this->set('_serialize', ['recruitment']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Recruitment id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $recruitment = $this->Recruitments->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $dataArr = $this->request->getData();
            $dataSave = [];
            foreach ($dataArr as $k => $data){
                $dataSave[$k] = htmlspecialchars($data);
            }
            $dataSave['update_at'] = date('d/m/Y', time());
            $dataSave['users_id'] = $this->Auth->user('id');
            $recruitment = $this->Recruitments->patchEntity($recruitment, $dataSave);
            if ($this->Recruitments->save($recruitment)) {
                $this->Flash->success(sprintf("<div class='alert alert-success'>%s</div>",  h("Nội Dung Đơn Hàng (ID = " . $id . ") Đã Được Cập Nhật!")), ['escape' => false]);

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(sprintf("<div class='alert alert-danger'>%s</div>",  h('Lỗi Cập Nhật, Hãy Kiểm Tra Lại')), ['escape' => false]);
        }
        $users = $this->Recruitments->Users->find('list', ['limit' => 200]);
        $this->set(compact('recruitment', 'users'));
        $this->set('_serialize', ['recruitment']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Recruitment id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $recruitment = $this->Recruitments->get($id);
        if ($this->Recruitments->delete($recruitment)) {
            $this->Flash->success(__('The recruitment has been deleted.'));
        } else {
            $this->Flash->error(__('The recruitment could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function imgupload()
    {
        reset($_FILES);
        $temp = current($_FILES);

        if(is_uploaded_file($temp['tmp_name']))
        {
            if(preg_match("/([^\w\s\d\-_~,;:\[\]\(\).])|([\.]{2,})/", $temp['name'])){
                header("HTTP/1.1 400 Invalid file name,Bad request");
                return;
            }
            // Validating Image file type by extensions
            if(!in_array(strtolower(pathinfo($temp['name'], PATHINFO_EXTENSION)), array("gif", "jpg", "png"))){
                header("HTTP/1.1 400 Invalid extension,Bad request");
                return;
            }
            $fileExt = pathinfo($temp['name'], PATHINFO_EXTENSION);
            $fileName = 'uploads' . DS . 'tinymce' . DS . time() . "." . $fileExt;
            $uploadPath = WWW_ROOT . "uploads" . DS . 'tinymce' . DS;
            if (!file_exists(WWW_ROOT . "uploads" . DS . 'tinymce' . DS)) {
                mkdir(WWW_ROOT . "uploads" . DS . 'tinymce' . DS, 0777, true);
            }
            move_uploaded_file($temp['tmp_name'], WWW_ROOT . $fileName);
            echo json_encode(array('file_path' => DS . $fileName));
        }
        die;
    }
}
