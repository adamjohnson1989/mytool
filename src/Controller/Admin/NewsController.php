<?php
namespace App\Controller\Admin;

use App\Controller\Admin\AdminController;
use Cake\Event\Event;
use Cake\Network\Session\DatabaseSession;
/**
 * News Controller
 *
 *
 * @method \App\Model\Entity\News[] paginate($object = null, array $settings = [])
 */
class NewsController extends AdminController
{
    public function beforeRender(Event $event)
    {
        parent::beforeRender($event); // TODO: Change the autogenerated stub
        $this->viewBuilder()->layout('admin');
    }
    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Users','Categories'],
            'limit'   => ITEM_PER_PAGE_ADMIN,
            'order'   => ['id' => 'desc'],
        ];
        $news = $this->paginate($this->News);

        $this->set(compact('news'));
        $this->set('_serialize', ['news']);
    }

    /**
     * View method
     *
     * @param string|null $id News id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $news = $this->News->get($id, [
            'contain' => []
        ]);

        $this->set('news', $news);
        $this->set('_serialize', ['news']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $news = $this->News->newEntity();
        $catObj = $this->loadModel('Categories');
        $catQuery = $catObj->find('all', [
            'conditions' => ['status' => 1]]);
        $catArr = $catQuery->toArray();
        $catData = array('0'=> '--Chọn Category--');
        if(count($catArr)){
            foreach ($catArr as $cat){
                $catData[$cat->id] = $cat->name;
            }
        }
        if ($this->request->is('post')) {
            $dataArr = $this->request->getData();
            unset($dataArr['file_upload']);
            $fileData = $_FILES['file_upload'];
            /*Upload image*/
            $fileArr = $this->upload($fileData,600,600,'news');
            foreach ($dataArr as $k => $data){
                $dataSave[$k] = htmlspecialchars($data);
            }
            $dataArr['thumb'] = $fileArr['imgPath'];
            $dataArr['created_at'] = date('m/d/Y', time());
            $dataArr['users_id'] = $this->Auth->user('id');
            $news = $this->News->patchEntity($news, $dataArr);
            if ($this->News->save($news)) {
                $this->Flash->success(sprintf("<div class='alert alert-success'>%s</div>",  h("Tin Tức Mới Đã Được Tạo!")), ['escape' => false]);
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(sprintf("<div class='alert alert-danger'>%s</div>",  h('Lỗi Tạo Tin Tức, Kiểm Tra Lại Thông Tin')), ['escape' => false]);
        }
        $this->set(compact('news'));
        $this->set('_serialize', ['news']);
        $this->set('catData',$catData);
    }

    /**
     * Edit method
     *
     * @param string|null $id News id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $new = $this->News->get($id, [
            'contain' => []
        ]);
        $catObj = $this->loadModel('Categories');
        $catQuery = $catObj->find('all', [
            'conditions' => ['status' => 1]]);
        $catArr = $catQuery->toArray();
        $catData = array('0'=> '--Chọn Category--');
        if(count($catArr)){
            foreach ($catArr as $cat){
                $catData[$cat->id] = $cat->name;
            }
        }
        if ($this->request->is(['patch', 'post', 'put'])) {
            $dataArr = $this->request->getData();
            unset($dataArr['file_upload']);
            $dataSave = [];
            foreach ($dataArr as $k => $data){
                $dataSave[$k] = htmlspecialchars($data);
            }
            $fileData = $_FILES['file_upload'];
            /*Upload image*/
            if($fileData['error'] == 0){
                $fileArr = $this->upload($fileData,600,600,'news');
                $dataSave['thumb'] = $fileArr['imgPath'];
            }else{
                $dataSave['thumb'] = $new->thumb;
            }
            $dataSave['update_at'] = date('m/d/Y', time());
            $dataSave['users_id'] = $this->Auth->user('id');
            $new = $this->News->patchEntity($new, $dataSave);
            if ($this->News->save($new)) {
                $this->Flash->success(sprintf("<div class='alert alert-success'>%s</div>",  h("Nội Dung Tin Tức (ID = " . $id . ") Đã Được Cập Nhật!")), ['escape' => false]);
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(sprintf("<div class='alert alert-danger'>%s</div>",  h('Lỗi Cập Nhật, Hãy Kiểm Tra Lại')), ['escape' => false]);
        }
        $this->set(compact('new'));
        $this->set('_serialize', ['new']);
        $this->set('catData',$catData);
    }

    /**
     * Delete method
     *
     * @param string|null $id News id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $news = $this->News->get($id);
        if ($this->News->delete($news)) {
            $this->Flash->success(__('The news has been deleted.'));
        } else {
            $this->Flash->error(__('The news could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function imgupload()
    {
        reset($_FILES);
        $temp = current($_FILES);
        if(is_uploaded_file($temp['tmp_name']))
        {
            if(preg_match("/([^\w\s\d\-_~,;:\[\]\(\).])|([\.]{2,})/", $temp['name'])){
                header("HTTP/1.1 400 Invalid file name,Bad request");
                return;
            }
            //
            $uploadResult = $this->upload($temp,'720','487','tinymce');
            echo json_encode(array('file_path' => $uploadResult['imgPath']));
        }
        die;
    }
}
